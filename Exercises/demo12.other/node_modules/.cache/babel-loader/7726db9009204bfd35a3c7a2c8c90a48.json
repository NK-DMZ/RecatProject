{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\RecatProject\\\\Exercises\\\\demo12.other\\\\src\\\\components\\\\TableSortingandscreening.jsx\";\nimport React, { Component } from 'react';\nimport { Table } from 'antd';\nimport MainMenu from '../MainMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TableSortingandscreening extends Component {\n  onChange(pagination, filters, sorter, extra) {\n    console.log('params', pagination, filters, sorter, extra);\n  }\n\n  render() {\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      filters: [{\n        text: 'Joe',\n        value: 'Joe'\n      }, {\n        text: 'Jim',\n        value: 'Jim'\n      }, {\n        text: 'Submenu',\n        value: 'Submenu',\n        children: [{\n          text: 'Green',\n          value: 'Green'\n        }, {\n          text: 'Black',\n          value: 'Black'\n        }]\n      }],\n      // specify the condition of filtering result\n      // here is that finding the name started with `value`\n      onFilter: (value, record) => record.name.indexOf(value) === 0,\n      sorter: (a, b) => a.name.length - b.name.length,\n      sortDirections: ['descend']\n    }, {\n      title: 'Age',\n      dataIndex: 'age',\n      defaultSortOrder: 'descend',\n      sorter: (a, b) => a.age - b.age\n    }, {\n      title: 'Address',\n      dataIndex: 'address',\n      filters: [{\n        text: 'London',\n        value: 'London'\n      }, {\n        text: 'New York',\n        value: 'New York'\n      }],\n      onFilter: (value, record) => record.address.indexOf(value) === 0\n    }];\n    const data = [{\n      key: '1',\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park'\n    }, {\n      key: '2',\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park'\n    }, {\n      key: '3',\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park'\n    }, {\n      key: '4',\n      name: 'Jim Red',\n      age: 32,\n      address: 'London No. 2 Lake Park'\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"antd\\u8868\\u683C\\u5206\\u7C7B\\u4E0E\\u7B5B\\u9009\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: data,\n        onChange: this.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/Project/RecatProject/Exercises/demo12.other/src/components/TableSortingandscreening.jsx"],"names":["React","Component","Table","MainMenu","TableSortingandscreening","onChange","pagination","filters","sorter","extra","console","log","render","columns","title","dataIndex","text","value","children","onFilter","record","name","indexOf","a","b","length","sortDirections","defaultSortOrder","age","address","data","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Table } from 'antd';\nimport MainMenu from '../MainMenu';\n\nexport default class TableSortingandscreening extends Component {\n    onChange(pagination, filters, sorter, extra) {\n        console.log('params', pagination, filters, sorter, extra);\n      }\n    render() {\n        const columns = [\n            {\n              title: 'Name',\n              dataIndex: 'name',\n              filters: [\n                {\n                  text: 'Joe',\n                  value: 'Joe',\n                },\n                {\n                  text: 'Jim',\n                  value: 'Jim',\n                },\n                {\n                  text: 'Submenu',\n                  value: 'Submenu',\n                  children: [\n                    {\n                      text: 'Green',\n                      value: 'Green',\n                    },\n                    {\n                      text: 'Black',\n                      value: 'Black',\n                    },\n                  ],\n                },\n              ],\n              // specify the condition of filtering result\n              // here is that finding the name started with `value`\n              onFilter: (value, record) => record.name.indexOf(value) === 0,\n              sorter: (a, b) => a.name.length - b.name.length,\n              sortDirections: ['descend'],\n            },\n            {\n              title: 'Age',\n              dataIndex: 'age',\n              defaultSortOrder: 'descend',\n              sorter: (a, b) => a.age - b.age,\n            },\n            {\n              title: 'Address',\n              dataIndex: 'address',\n              filters: [\n                {\n                  text: 'London',\n                  value: 'London',\n                },\n                {\n                  text: 'New York',\n                  value: 'New York',\n                },\n              ],\n              onFilter: (value, record) => record.address.indexOf(value) === 0,\n            },\n        ];\n        const data = [\n        {\n            key: '1',\n            name: 'John Brown',\n            age: 32,\n            address: 'New York No. 1 Lake Park',\n        },\n        {\n            key: '2',\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 1 Lake Park',\n        },\n        {\n            key: '3',\n            name: 'Joe Black',\n            age: 32,\n            address: 'Sidney No. 1 Lake Park',\n        },\n        {\n            key: '4',\n            name: 'Jim Red',\n            age: 32,\n            address: 'London No. 2 Lake Park',\n        },\n        ];\n          \n        return (\n            <div>\n                <h1>antd表格分类与筛选</h1>\n                <Table columns={columns} dataSource={data} onChange={this.onChange} />\n                <MainMenu></MainMenu>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}