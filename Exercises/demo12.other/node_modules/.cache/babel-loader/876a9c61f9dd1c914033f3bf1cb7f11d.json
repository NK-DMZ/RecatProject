{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\RecatProject\\\\Exercises\\\\demo12.other\\\\src\\\\components\\\\CopytoClipboard.jsx\";\nimport React, { Component } from 'react';\nimport MainMenu from '../MainMenu';\nimport './common.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CopytoClipboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.copyinput = () => {\n      const input = document.querySelector('#demoInput');\n      input.select();\n\n      if (document.execCommand('copy')) {\n        document.execCommand('copy');\n        console.log('复制成功');\n      }\n    };\n\n    this.copyText = () => {\n      console.log('函数在运行');\n      var text = document.getElementById(\"text\").innerText;\n      var input = document.getElementById(\"input\");\n      input.value = text; // 修改文本框的内容\n\n      input.select(); // 选中文本\n\n      document.execCommand(\"copy\"); // 执行浏览器复制命令\n\n      alert(\"复制成功\");\n    };\n\n    this.writecontent = () => {\n      var textareaEl = document.createElement('textarea');\n      textareaEl.setAttribute('readonly', 'readonly'); // 防止手机上弹出软键盘\n\n      textareaEl.value = this.state.writevalue;\n      document.body.appendChild(textareaEl);\n      textareaEl.select();\n      document.execCommand('copy');\n      document.body.removeChild(textareaEl);\n    };\n\n    this.state = {\n      writevalue: '写入数据到粘贴板吧！'\n    };\n  }\n\n  render() {\n    // const btnCopy = new Clipboard('btn');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"JavaScript\\u590D\\u5236\\u5185\\u5BB9\\u5230\\u526A\\u8D34\\u677F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"copyinpiut\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u590D\\u5236input\\u6807\\u7B7E\\u5185\\u5BB9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"demoInput\",\n          defaultValue: \"hello world\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          \"data-clipboard-target\": \"#demoInput\",\n          onClick: this.copyinput,\n          children: \"\\u70B9\\u6211\\u590D\\u5236\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"copyp\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u590D\\u5236p\\u6807\\u7B7E\\u5185\\u5BB9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"text\",\n          children: \"\\u6211\\u628A\\u4F60\\u5F53\\u5144\\u5F1F\\u4F60\\u5374\\u60F3\\u7740\\u590D\\u5236\\u6211\\uFF1F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.copyText,\n          children: \"copy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 52\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"input\",\n          defaultValue: \"\\u8FD9\\u662F\\u5E55\\u540E\\u9ED1\\u624B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"WritePasteboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u5199\\u5165\\u6570\\u636E\\u8FDB\\u5165\\u7C98\\u8D34\\u677F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.writecontent,\n          children: \"\\u5199\\u5165\\u6570\\u636E\\u8FDB\\u5165\\u7C98\\u8D34\\u677F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MainMenu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/*\n定义和用法\nappendChild() 方法可向节点的子节点列表的末尾添加新的子节点。\n提示：如果文档树中已经存在了 newchild，它将从文档树中删除，然后重新插入它的新位置。\n如果 newchild 是 DocumentFragment 节点，则不会直接插入它，而是把它的子节点按序\n插入当前节点的 childNodes[] 数组的末尾。\n你可以使用 appendChild() 方法移除元素到另外一个元素。\n\n添加列表项:\ndocument.getElementById(\"myList\").appendChild(newListItem);\n\n转移某个列表项到另外一个列表项：\nvar node=document.getElementById(\"myList2\").lastChild;\ndocument.getElementById(\"myList1\").appendChild(node);\n\n\nHTMLInputElement.setSelectionRange()\nHTMLInputElement.setSelectionRange 方法用于设定<input> 或 <textarea> 元素中当前选中文本的起始和结束位置。\n\n在较新的浏览器中，你可以通过一个可选的 selectionDirection 来指定文本选中的方向。比如通过点击和拖动从结束位置往起始位置选中一个字符串。\n\n每次调用这个这个方法都会更新 HTMLInputElement 的 selectionStart, selectionEnd 和 selectionDirection 属性。\n\n要注意的是，在 WHATWG forms spec 中，selectionStart, selectionEnd 属性和 setSelectionRange 方法只能应用于类型为文本、搜索、链接、电话号码和密码的输入。\nChrome 从版本 33 开始会在访问其余类型的这些属性和方法时抛出异常。例如，输入类型为数字时会抛出：“不能从'HTMLInputElement'中读取'selectionStart'属性：\n输入元素的类型('number')不支持选择（Failed to read the 'selectionStart' property from 'HTMLInputElement': The input element's type ('number') does not support selection）”。\n如果你希望全选输入元素中的文本，你可以使用 HTMLInputElement.select() 方法。\n语法\nelement.setSelectionRange(selectionStart, selectionEnd [, selectionDirection]);\n参数\n如果 selectionEnd 小于 selectionStart，则二者都会被看作 selectionEnd。\nselectionStart\n被选中的第一个字符的位置索引，从0开始。如果这个值比元素的 value 长度还大，则会被看作 value 最后一个位置的索引。\nselectionEnd\n被选中的最后一个字符的 下一个 位置索引。如果这个值比元素的value长度还大，则会被看作value最后一个位置的索引。\nselectionDirection 可选\n一个表示选择方向的字符串，可能的值有：\n\"forward\"\n\"backward\"\n\"none\" 默认值，表示方向未知或不相关。\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/setSelectionRange\n*/","map":{"version":3,"sources":["D:/Project/RecatProject/Exercises/demo12.other/src/components/CopytoClipboard.jsx"],"names":["React","Component","MainMenu","CopytoClipboard","constructor","props","copyinput","input","document","querySelector","select","execCommand","console","log","copyText","text","getElementById","innerText","value","alert","writecontent","textareaEl","createElement","setAttribute","state","writevalue","body","appendChild","removeChild","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MainMenu from '../MainMenu'\nimport './common.css'\n\nexport default class CopytoClipboard extends Component {\n    constructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\twritevalue:'写入数据到粘贴板吧！'\n\t\t}\n\t}\n    copyinput=()=>{\n        const input = document.querySelector('#demoInput');\n        input.select();\n        if (document.execCommand('copy')) {\n            document.execCommand('copy');\n            console.log('复制成功');\n        }\n    }\n    copyText=()=> {\n        console.log('函数在运行');\n        var text = document.getElementById(\"text\").innerText;\n        var input = document.getElementById(\"input\");\n        input.value = text; // 修改文本框的内容\n        input.select(); // 选中文本\n        document.execCommand(\"copy\"); // 执行浏览器复制命令\n        alert(\"复制成功\");\n    }\n    writecontent=()=>{\n        var textareaEl = document.createElement('textarea');\n        textareaEl.setAttribute('readonly', 'readonly'); // 防止手机上弹出软键盘\n        textareaEl.value = this.state.writevalue;\n        document.body.appendChild(textareaEl);\n        textareaEl.select();\n        document.execCommand('copy');\n        document.body.removeChild(textareaEl);\n    }\n    render() {\n        // const btnCopy = new Clipboard('btn');\n        return (\n            <div>\n                <h1>JavaScript复制内容到剪贴板</h1>\n                <div className=\"copyinpiut\">\n                    <h3>复制input标签内容</h3>\n                    <input type=\"text\" id=\"demoInput\" defaultValue=\"hello world\"  />\n                    <button data-clipboard-target=\"#demoInput\" onClick={this.copyinput} >点我复制</button>\n                    <hr />                   \n                </div>\n                <div className=\"copyp\">\n                    <h3>复制p标签内容</h3>\n                    <p id=\"text\">我把你当兄弟你却想着复制我？</p><button onClick={this.copyText}>copy</button>\n                    {/* <textarea id=\"input\">这是幕后黑手</textarea> */}\n                    <textarea id=\"input\" defaultValue=\"这是幕后黑手\" ></textarea>\n                    <hr />\n                </div>\n                <div className=\"WritePasteboard\">\n                    <h3>写入数据进入粘贴板</h3>\n                    <button onClick={this.writecontent}>写入数据进入粘贴板</button>\n                </div>\n                <div className=\"verification\">\n                    <input type=\"text\" />\n                </div>\n               \n                <MainMenu></MainMenu>\n            </div>\n        )\n    }\n}\n/*\n定义和用法\nappendChild() 方法可向节点的子节点列表的末尾添加新的子节点。\n提示：如果文档树中已经存在了 newchild，它将从文档树中删除，然后重新插入它的新位置。\n如果 newchild 是 DocumentFragment 节点，则不会直接插入它，而是把它的子节点按序\n插入当前节点的 childNodes[] 数组的末尾。\n你可以使用 appendChild() 方法移除元素到另外一个元素。\n\n添加列表项:\ndocument.getElementById(\"myList\").appendChild(newListItem);\n\n转移某个列表项到另外一个列表项：\nvar node=document.getElementById(\"myList2\").lastChild;\ndocument.getElementById(\"myList1\").appendChild(node);\n\n\nHTMLInputElement.setSelectionRange()\nHTMLInputElement.setSelectionRange 方法用于设定<input> 或 <textarea> 元素中当前选中文本的起始和结束位置。\n\n在较新的浏览器中，你可以通过一个可选的 selectionDirection 来指定文本选中的方向。比如通过点击和拖动从结束位置往起始位置选中一个字符串。\n\n每次调用这个这个方法都会更新 HTMLInputElement 的 selectionStart, selectionEnd 和 selectionDirection 属性。\n\n要注意的是，在 WHATWG forms spec 中，selectionStart, selectionEnd 属性和 setSelectionRange 方法只能应用于类型为文本、搜索、链接、电话号码和密码的输入。\nChrome 从版本 33 开始会在访问其余类型的这些属性和方法时抛出异常。例如，输入类型为数字时会抛出：“不能从'HTMLInputElement'中读取'selectionStart'属性：\n输入元素的类型('number')不支持选择（Failed to read the 'selectionStart' property from 'HTMLInputElement': The input element's type ('number') does not support selection）”。\n如果你希望全选输入元素中的文本，你可以使用 HTMLInputElement.select() 方法。\n语法\nelement.setSelectionRange(selectionStart, selectionEnd [, selectionDirection]);\n参数\n如果 selectionEnd 小于 selectionStart，则二者都会被看作 selectionEnd。\nselectionStart\n被选中的第一个字符的位置索引，从0开始。如果这个值比元素的 value 长度还大，则会被看作 value 最后一个位置的索引。\nselectionEnd\n被选中的最后一个字符的 下一个 位置索引。如果这个值比元素的value长度还大，则会被看作value最后一个位置的索引。\nselectionDirection 可选\n一个表示选择方向的字符串，可能的值有：\n\"forward\"\n\"backward\"\n\"none\" 默认值，表示方向未知或不相关。\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/setSelectionRange\n*/"]},"metadata":{},"sourceType":"module"}